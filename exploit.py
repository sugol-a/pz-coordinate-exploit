#!/usr/bin/env python3

import re
import csv
import datetime

REGEX_TIMESTAMP = re.compile('^\[[0-9]{2}\-[0-9]{2}\-[0-9]{2} ([0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]+)\]')
REGEX_PLAYER_ID = re.compile('Received timeout for player (\S+) id ([0-9]+)')
REGEX_PLAYER_POS = re.compile('Player ([0-9]+) teleport from \(([0-9\.]+), ([0-9\.]+), ([0-9\.]+)\)')

class PlayerPos:
    def __init__(self, pid, x, y):
        self.pid = pid
        self.x = x
        self.y = y

    def __repr__(self):
        return f'({self.pid}, {self.x}, {self.y})'

class PlayerID:
    def __init__(self, pid, name):
        self.pid = pid
        self.name = name

    def __repr__(self):
        if self.name is None:
            return f'{self.pid}:'
        else:
            return f'{self.pid}:{self.name}'

    def __str__(self):
        return self.__repr__()

def maybe_parse_player_pos(line):
    match = REGEX_PLAYER_POS.search(line)
    if match:
        return PlayerPos(int(match.group(1)), float(match.group(2)), float(match.group(3)))
    else:
        return None

def maybe_parse_player_id(line):
    match = REGEX_PLAYER_ID.search(line)
    if match:
        return PlayerID(int(match.group(2)), match.group(1))
    else:
        return None

def get_timestamp(line):
    match = REGEX_TIMESTAMP.search(line)
    if match:
        return match.group(1)
    else:
        return None

def parse_line(line):
    timestamp = get_timestamp(line)

    # Figure out what kind of line this is, and return the relevant object
    pos = maybe_parse_player_pos(line)
    if pos:
        return (timestamp, pos)

    pid = maybe_parse_player_id(line)
    if pid:
        return (timestamp, pid)

    # Not an interesting line
    return None

def main():
    player_names = {}
    now = datetime.datetime.now().strftime('%d-%m-%y_%H-%M')
    fieldnames = [ 'timestamp', 'player', 'x', 'y' ]
    entries = []

    outfile = f'positions-{now}.csv'

    with open(outfile, 'w') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

    while True:
        line = input()
        values = parse_line(line)

        # Ignore uninteresting lines
        if not values:
            continue

        timestamp, obj = values

        if type(obj) is PlayerPos:
            entry = {
                'timestamp': timestamp,
                'x': obj.x,
                'y': obj.y
            }

            if obj.pid in player_names:
                print(f'Got player position for "{player_names[obj.pid]}"')
                entry['player'] = PlayerID(obj.pid, player_names[obj.pid])
            else:
                print(f'I don\'t have a player name for pid {obj.pid}')
                entry['player'] = PlayerID(obj.pid, None)

            # Append this entry
            entries.append(entry)
            with open(outfile, 'a') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writerow(entry)

        elif type(obj) is PlayerID:
            if not obj.pid in player_names:
                print(f'Adding player id {obj.pid} = "{obj.name}"')
                player_names[obj.pid] = obj.name

                # Go back through and add the player name to entries without it
                for e in entries:
                    if e['player'].name is None and e['player'].pid == obj.pid:
                        print(f'Updating player name for player {obj.pid}: "{obj.name}"')
                        e['player'].name = obj.name

                # Overwrite the csv file with the updated entries
                with open(outfile, 'w') as csvfile:
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    for e in entries:
                        writer.writerow(e)

            elif obj.pid in player_names and obj.name != player_names[obj.pid]:
                print(f'Player name associated with ID {obj.pid} changed, updating')
                player_names[obj.pid] = obj.name

if __name__ == "__main__":
    main()
